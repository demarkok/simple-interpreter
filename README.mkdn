# A parser and interpreter for a fictional programming language

## Syntax
```
FILE = BLOCK
BLOCK = (STATEMENT)*
BLOCK_WITH_BRACES = "{" BLOCK "}"
STATEMENT = FUNCTION | VARIABLE | EXPRESSION | WHILE | IF | ASSIGNMENT | RETURN | PRINTLN | READ
FUNCTION = "fun" IDENTIFIER "(" PARAMETER_NAMES ")" BLOCK_WITH_BRACES
VARIABLE = "var" IDENTIFIER ("=" EXPRESSION)?
PARAMETER_NAMES = IDENTIFIER{,}
WHILE = "while" "(" EXPRESSION ")" BLOCK_WITH_BRACES
IF = "if" "(" EXPRESSION ")" BLOCK_WITH_BRACES ("else" BLOCK_WITH_BRACES)?
ASSIGNMENT = IDENTIFIER "=" EXPRESSION
RETURN = "return" EXPRESSION
PRINTLN = "println" "(" ARGUMENTS ")"
READ = "read" "(" IDENTIFIER ")"
EXPRESSION = FUNCTION_CALL | BINARY_EXPRESSION | IDENTIFIER | LITERAL | "(" EXPRESSION ")"
FUNCTION_CALL = IDENTIFIER "(" ARGUMENTS ")"
ARGUMENTS = EXPRESSION{","}
BINARY_EXPRESSION = EXPRESSION OPERATOR EXPRESSION
OPERATOR =  "+" | "-" | "*" | "/" | "%" | ">" | "<" | ">=" | "<=" | "==" | "!=" | "||" | "&&"
IDENTIFIER = <like in C>
LITERAL = <like decimal literal in Java>

```

### Contractions:
```
X{Y} – possibly empty list of X's separeted by Y's
(X)* – X repeated 0 or more times
(X)? – optional X entrance
```

## Semantics
- One line comments support (`//`).
- Functions are available after declaration, within the scope where they were declared.
- Function overloading isn't supported.
- Function or variable declaration overloads external declaration with the same name.
- `println` prints it's arguments separated by whitespace.
- `read` reads a value from the input stream to the variable in argument.
- If a function hasn't return statement, the returning value is supposed to be 0.
- In `if` and `while` conditions integer value casts to boolean like in C (not 0 is `true`, 0 is `false`)

## Examples
```
var a = 10
var b = 20
if (a > b) {
    println(1)
} else {
    println(0)
}
```

```
fun fib(n) {
    if (n <= 1) {
        return 1
    }
    return fib(n - 1) + fib(n - 2)
}

var i = 1
while (i <= 5) {
    println(i, fib(i))
    i = i + 1
}
```

```
fun foo(n) {
    fun bar(m) {
        return m + n
    }

    return bar(1)
}

println(foo(41)) // prints 42
```
